using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using System.Text.RegularExpressions;
using UnityEngine;

namespace GungeonTogether.Steam
{
    /// <summary>
    /// Manages Steam callbacks for overlay join functionality and invite handling
    /// </summary>
    public static class SteamCallbackManager
    {
        // Steam callback delegates and event system
        private static object steamCallbackHandle = null;
        private static object overlayCallbackHandle = null;
        private static object lobbyCallbackHandle = null;
        private static MethodInfo runCallbacksMethod = null;

        // Steam callback event handlers
        public static event Action<string> OnOverlayJoinRequested;
        public static event Action<bool> OnOverlayActivated;
        public static event Action<ulong> OnJoinRequested;

        private static bool joinCallbacksRegistered = false;
        private static bool earlyInitialized = false;

        // Store pending join requests that arrive before the game is ready
        private static Queue<ulong> pendingJoinRequests = new Queue<ulong>();
        private static Queue<string> pendingOverlayJoinRequests = new Queue<string>();

        // Persistent callback fields
        private static object lobbyJoinCallback = null;
        private static object richPresenceJoinCallback = null;

        /// <summary>
        /// Initialize Steam callbacks for overlay join functionality and invite handling
        /// </summary>
        public static void InitializeSteamCallbacks()
        {
            if (earlyInitialized)
            {
                Debug.Log("[ETGSteamP2P] Steam callbacks already initialized early, skipping...");
                return;
            }
            earlyInitialized = true;
            try
            {
                Debug.Log("[ETGSteamP2P] üîÑ Initializing Steam callbacks for invite and overlay join support...");
                Assembly steamworksAssembly = SteamReflectionHelper.GetSteamworksAssembly();
                if (ReferenceEquals(steamworksAssembly, null))
                {
                    Debug.LogWarning("[ETGSteamP2P] Cannot initialize Steam callbacks - Steamworks assembly not available");
                    return;
                }
                Debug.Log($"[ETGSteamP2P] Found Steamworks assembly: {steamworksAssembly.FullName}");
                Debug.Log("[ETGSteamP2P] Available Steamworks types:");
                foreach (var type in steamworksAssembly.GetTypes())
                {
                    if (type.Name.Contains("Callback") || type.Name.Contains("GameLobby") || type.Name.Contains("GameRichPresence"))
                    {
                        Debug.Log($"[ETGSteamP2P] - {type.FullName}");
                    }
                }
                Type callbackBaseType = steamworksAssembly.GetType("Steamworks.Callback`1", false);
                Type gameLobbyJoinRequestedType = steamworksAssembly.GetType("Steamworks.GameLobbyJoinRequested_t", false);
                Type gameRichPresenceJoinRequestedType = steamworksAssembly.GetType("Steamworks.GameRichPresenceJoinRequested_t", false);
                Debug.Log($"[ETGSteamP2P] Callback base type found: {callbackBaseType?.FullName ?? "NULL"}");
                Debug.Log($"[ETGSteamP2P] GameLobbyJoinRequested_t found: {gameLobbyJoinRequestedType?.FullName ?? "NULL"}");
                Debug.Log($"[ETGSteamP2P] GameRichPresenceJoinRequested_t found: {gameRichPresenceJoinRequestedType?.FullName ?? "NULL"}");
                if (ReferenceEquals(callbackBaseType, null))
                {
                    Debug.LogWarning("[ETGSteamP2P] ‚ö†Ô∏è Steam callback base type not found - implementing fallback polling system");
                    joinCallbacksRegistered = true;
                    return;
                }
                bool anyRegistered = false;
                if (!ReferenceEquals(gameLobbyJoinRequestedType, null))
                {
                    if (TryRegisterCallback(steamworksAssembly, callbackBaseType, gameLobbyJoinRequestedType, "OnGameLobbyJoinRequested"))
                    {
                        Debug.Log("[ETGSteamP2P] ‚úÖ Successfully registered GameLobbyJoinRequested_t callback");
                        anyRegistered = true;
                    }
                    else
                    {
                        Debug.LogError("[ETGSteamP2P] ‚ùå Failed to register GameLobbyJoinRequested_t callback");
                    }
                }
                else
                {
                    Debug.LogError("[ETGSteamP2P] ‚ùå GameLobbyJoinRequested_t type not found");
                }
                if (!ReferenceEquals(gameRichPresenceJoinRequestedType, null))
                {
                    if (TryRegisterCallback(steamworksAssembly, callbackBaseType, gameRichPresenceJoinRequestedType, "OnGameRichPresenceJoinRequested"))
                    {
                        Debug.Log("[ETGSteamP2P] ‚úÖ Successfully registered GameRichPresenceJoinRequested_t callback");
                        anyRegistered = true;
                    }
                    else
                    {
                        Debug.LogError("[ETGSteamP2P] ‚ùå Failed to register GameRichPresenceJoinRequested_t callback");
                    }
                }
                else
                {
                    Debug.LogError("[ETGSteamP2P] ‚ùå GameRichPresenceJoinRequested_t type not found");
                }
                if (anyRegistered)
                {
                    Debug.Log("[ETGSteamP2P] ‚úÖ Steam callbacks registered successfully - join requests should work");
                    joinCallbacksRegistered = true;
                }
                else
                {
                    Debug.LogWarning("[ETGSteamP2P] ‚ö†Ô∏è Failed to register Steam callbacks - falling back to manual detection");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[ETGSteamP2P] Exception during Steam callback initialization: {ex.Message}\n{ex.StackTrace}");
            }
        }

        /// <summary>
        /// Try to register a Steam callback for the specified type - robust and type-safe
        /// </summary>
        // private static bool TryRegisterCallback(Assembly steamworksAssembly, Type callbackBaseType, Type callbackDataType, string handlerMethodName)
        // {
        //     try
        //     {
        //         Type genericCallbackType = callbackBaseType.IsGenericTypeDefinition
        //             ? callbackBaseType.MakeGenericType(callbackDataType)
        //             : steamworksAssembly.GetType("Steamworks.Callback`1", false)?.MakeGenericType(callbackDataType);
        //         if (ReferenceEquals(genericCallbackType, null))
        //         {
        //             Debug.LogWarning($"[SteamCallbackManager] Could not create generic Callback<{callbackDataType.Name}>");
        //             return false;
        //         }
        //         var dispatchDelegateType = genericCallbackType.GetNestedType("DispatchDelegate", BindingFlags.Public | BindingFlags.NonPublic);
        //         if (ReferenceEquals(dispatchDelegateType, null))
        //         {
        //             Debug.LogWarning($"[SteamCallbackManager] Could not find DispatchDelegate type for {callbackDataType.Name}");
        //             return false;
        //         }
        //         // Create a dynamic method that matches the delegate signature: void Callback(T param)
        //         var dynamicMethod = new DynamicMethod(
        //             $"DynamicHandler_{callbackDataType.Name}",
        //             typeof(void),
        //             new[] { callbackDataType },
        //             typeof(SteamCallbackManager),
        //             true);
        //         var il = dynamicMethod.GetILGenerator();
        //         // Load the callback type name as a string constant
        //         il.Emit(OpCodes.Ldstr, callbackDataType.Name);
        //         // Load the callback parameter (argument 0)
        //         il.Emit(OpCodes.Ldarg_0);
        //         // Box the struct if it's a value type
        //         if (callbackDataType.IsValueType)
        //         {
        //             il.Emit(OpCodes.Box, callbackDataType);
        //         }
        //         // Call our generic handler
        //         MethodInfo actualHandler = typeof(SteamCallbackManager).GetMethod("HandleGenericCallback", BindingFlags.NonPublic | BindingFlags.Static);
        //         if (ReferenceEquals(actualHandler, null))
        //         {
        //             Debug.LogWarning($"[SteamCallbackManager] Could not find HandleGenericCallback method");
        //             return false;
        //         }
        //         il.Emit(OpCodes.Call, actualHandler);
        //         il.Emit(OpCodes.Ret);
        //         // Create delegate from the dynamic method
        //         var handler = dynamicMethod.CreateDelegate(dispatchDelegateType);
        //         // Find a suitable constructor or Create method
        //         object callbackInstance = null;
        //         var ctors = genericCallbackType.GetConstructors();
        //         bool foundCtor = false;
        //         foreach (var ctor in ctors)
        //         {
        //             var parameters = ctor.GetParameters();
        //             if (parameters.Length.Equals(2) && parameters[0].ParameterType.Equals(dispatchDelegateType) && parameters[1].ParameterType.Equals(typeof(bool)))
        //             {
        //                 callbackInstance = ctor.Invoke(new object[] { handler, false });
        //                 foundCtor = true;
        //                 break;
        //             }
        //             if (parameters.Length.Equals(1) && parameters[0].ParameterType.Equals(dispatchDelegateType))
        //             {
        //                 callbackInstance = ctor.Invoke(new object[] { handler });
        //                 foundCtor = true;
        //                 break;
        //             }
        //         }
        //         if (!foundCtor || ReferenceEquals(callbackInstance, null))
        //         {
        //             var createMethod = genericCallbackType.GetMethod("Create", BindingFlags.Public | BindingFlags.Static);
        //             if (!ReferenceEquals(createMethod, null))
        //             {
        //                 var createParams = createMethod.GetParameters();
        //                 if (createParams.Length.Equals(1) && createParams[0].ParameterType.Equals(dispatchDelegateType))
        //                 {
        //                     callbackInstance = createMethod.Invoke(null, new object[] { handler });
        //                     foundCtor = !ReferenceEquals(callbackInstance, null);
        //                 }
        //             }
        //         }
        //         if (!foundCtor || ReferenceEquals(callbackInstance, null))
        //         {
        //             Debug.LogWarning($"[SteamCallbackManager] Could not find suitable constructor or static Create method for {genericCallbackType.Name}");
        //             return false;
        //         }
        //         if (callbackDataType.Name.Contains("Lobby"))
        //         {
        //             lobbyJoinCallback = callbackInstance;
        //         }
        //         else if (callbackDataType.Name.Contains("RichPresence"))
        //         {
        //             richPresenceJoinCallback = callbackInstance;
        //         }
        //         Debug.Log($"[SteamCallbackManager] Successfully registered callback for {callbackDataType.Name}");
        //         return true;
        //     }
        //     catch (Exception ex)
        //     {
        //         Debug.LogError($"[SteamCallbackManager] Error registering callback for {callbackDataType.Name}: {ex.Message}\n{ex.StackTrace}");
        //         return false;
        //     }
        // }

        /// <summary>
        /// Generic callback handler that routes to specific handlers based on callback type
        /// </summary>
        private static void HandleGenericCallback(string callbackTypeName, object param)
        {
            try
            {
                Debug.Log($"[SteamCallbackManager] HandleGenericCallback called for type: {callbackTypeName}");
                if (callbackTypeName.Contains("GameLobbyJoinRequested"))
                {
                    HandleLobbyJoinRequest(param);
                }
                else if (callbackTypeName.Contains("GameRichPresenceJoinRequested"))
                {
                    HandleRichPresenceJoinRequest(param);
                }
                else
                {
                    Debug.LogWarning($"[SteamCallbackManager] Unknown callback type: {callbackTypeName}");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error in HandleGenericCallback: {ex.Message}\n{ex.StackTrace}");
            }
        }

        /// <summary>
        /// Handle lobby join requests using reflection to access the lobby ID
        /// </summary>
        private static void HandleLobbyJoinRequest(object param)
        {
            Debug.Log("[SteamCallbackManager] HandleLobbyJoinRequest called");
            if (ReferenceEquals(param, null))
            {
                Debug.LogWarning("[SteamCallbackManager] Lobby join request parameter is null");
                return;
            }
            try
            {
                var paramType = param.GetType();
                var lobbyIdField = paramType.GetField("m_steamIDLobby") ?? 
                                  paramType.GetField("m_ulSteamIDLobby") ?? 
                                  paramType.GetField("m_SteamIDLobby") ?? 
                                  paramType.GetField("lobbyID");
                if (!ReferenceEquals(lobbyIdField, null))
                {
                    var value = lobbyIdField.GetValue(param);
                    if (!ReferenceEquals(value, null) && ulong.TryParse(value.ToString(), out ulong lobbyId))
                    {
                        Debug.Log($"[SteamCallbackManager] Join requested for lobby: {lobbyId}");
                        ProcessLobbyJoinRequest(lobbyId);
                    }
                    else
                    {
                        Debug.LogWarning($"[SteamCallbackManager] Could not parse lobby ID from value: {value}");
                    }
                }
                else
                {
                    Debug.LogWarning($"[SteamCallbackManager] Could not find lobby ID field in type: {paramType.Name}");
                    Debug.Log("[SteamCallbackManager] Available fields:");
                    foreach (var field in paramType.GetFields())
                    {
                        Debug.Log($"[SteamCallbackManager] - {field.Name}: {field.FieldType.Name}");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error handling lobby join request: {ex.Message}\n{ex.StackTrace}");
            }
        }

        /// <summary>
        /// Handle rich presence join requests using reflection
        /// </summary>
        private static void HandleRichPresenceJoinRequest(object param)
        {
            Debug.Log("[SteamCallbackManager] HandleRichPresenceJoinRequest called");
            if (ReferenceEquals(param, null))
            {
                Debug.LogWarning("[SteamCallbackManager] Rich presence join request parameter is null");
                return;
            }
            try
            {
                var paramType = param.GetType();
                var connectField = paramType.GetField("m_rgchConnect") ?? 
                                  paramType.GetField("m_pchConnect") ?? 
                                  paramType.GetField("connectString");
                if (!ReferenceEquals(connectField, null))
                {
                    var connectValue = connectField.GetValue(param);
                    if (!ReferenceEquals(connectValue, null))
                    {
                        string connectString = connectValue.ToString();
                        Debug.Log($"[SteamCallbackManager] Rich presence join requested with connect string: {connectString}");
                        ProcessRichPresenceJoinRequest(connectString);
                    }
                }
                else
                {
                    Debug.LogWarning($"[SteamCallbackManager] Could not find connect field in type: {paramType.Name}");
                    Debug.Log("[SteamCallbackManager] Available fields:");
                    foreach (var field in paramType.GetFields())
                    {
                        Debug.Log($"[SteamCallbackManager] - {field.Name}: {field.FieldType.Name}");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error handling rich presence join request: {ex.Message}\n{ex.StackTrace}");
            }
        }

        /// <summary>
        /// Process the actual lobby join request
        /// </summary>
        private static void ProcessLobbyJoinRequest(ulong lobbyId)
        {
            Debug.Log($"[SteamCallbackManager] Processing lobby join request for ID: {lobbyId}");
            // Add your actual lobby join logic here
            // For example:
            // - Queue the join request
            // - Validate the lobby
            // - Join the lobby via Steam API
            // - Update UI state
        }

        /// <summary>
        /// Process the actual rich presence join request
        /// </summary>
        private static void ProcessRichPresenceJoinRequest(string connectString)
        {
            Debug.Log($"[SteamCallbackManager] Processing rich presence join request: {connectString}");
            if (string.IsNullOrEmpty(connectString))
            {
                Debug.LogWarning("[SteamCallbackManager] Rich presence connect string is null or empty");
                return;
            }
            try
            {
                // Try to extract a lobby ID from the connect string (expecting a 64-bit ulong)
                ulong lobbyId = 0;
                string[] parts = connectString.Split(' ', '\t', '\n', '\r', ';', ',');
                foreach (var part in parts)
                {
                    if (ulong.TryParse(part, out lobbyId) && !lobbyId.Equals(0UL))
                    {
                        break;
                    }
                }
                if (lobbyId.Equals(0UL))
                {
                    Debug.LogWarning($"[SteamCallbackManager] Could not parse a valid lobby ID from connect string: {connectString}");
                    return;
                }
                Debug.Log($"[SteamCallbackManager] Attempting to join lobby via SteamMatchmaking.JoinLobby: {lobbyId}");
                // Use reflection to call SteamMatchmaking.JoinLobby
                var steamworksAssembly = SteamReflectionHelper.GetSteamworksAssembly();
                if (ReferenceEquals(steamworksAssembly, null))
                {
                    Debug.LogWarning("[SteamCallbackManager] Steamworks assembly not available");
                    return;
                }
                var matchmakingType = steamworksAssembly.GetType("Steamworks.SteamMatchmaking", false);
                if (ReferenceEquals(matchmakingType, null))
                {
                    Debug.LogWarning("[SteamCallbackManager] SteamMatchmaking type not found");
                    return;
                }
                var csteamIdType = steamworksAssembly.GetType("Steamworks.CSteamID", false);
                if (ReferenceEquals(csteamIdType, null))
                {
                    Debug.LogWarning("[SteamCallbackManager] CSteamID type not found");
                    return;
                }
                // Create a CSteamID instance for the lobby
                object lobbyCSteamId = Activator.CreateInstance(csteamIdType, lobbyId);
                var joinLobbyMethod = matchmakingType.GetMethod("JoinLobby", new[] { csteamIdType });
                if (ReferenceEquals(joinLobbyMethod, null))
                {
                    Debug.LogWarning("[SteamCallbackManager] JoinLobby method not found");
                    return;
                }
                var result = joinLobbyMethod.Invoke(null, new[] { lobbyCSteamId });
                Debug.Log($"[SteamCallbackManager] JoinLobby invoked, result: {result}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error processing rich presence join request: {ex.Message}\n{ex.StackTrace}");
            }
        }

        // Type-specific overloads for Steamworks callback handlers to match delegate signatures
        // Remove the old _Typed indirection and use the correct type directly

        /// <summary>
        /// Try to register a Steam callback for the specified type - robust and type-safe
        /// </summary>
        // --- BEGIN: Old working callback registration pattern ---
        private static bool TryRegisterCallback(Assembly steamworksAssembly, Type callbackBaseType, Type callbackDataType, string handlerMethodName)
        {
            try
            {
                // Create generic Callback<T> type
                Type genericCallbackType = callbackBaseType.IsGenericTypeDefinition
                    ? callbackBaseType.MakeGenericType(callbackDataType)
                    : steamworksAssembly.GetType("Steamworks.Callback`1", false)?.MakeGenericType(callbackDataType);
                if (ReferenceEquals(genericCallbackType, null))
                {
                    Debug.LogWarning($"[SteamCallbackManager] Could not create generic Callback<{callbackDataType.Name}>");
                    return false;
                }
                // Find DispatchDelegate type
                var dispatchDelegateType = genericCallbackType.GetNestedType("DispatchDelegate", BindingFlags.Public | BindingFlags.NonPublic);
                if (ReferenceEquals(dispatchDelegateType, null))
                {
                    Debug.LogWarning($"[SteamCallbackManager] Could not find DispatchDelegate type for {callbackDataType.Name}");
                    return false;
                }
                // Create a handler instance with the correct signature using a dynamic method
                // The delegate must be: void Callback(T param)
                MethodInfo handlerMethod = typeof(SteamCallbackManager).GetMethod(handlerMethodName, BindingFlags.NonPublic | BindingFlags.Static, null, new[] { callbackDataType }, null);
                if (ReferenceEquals(handlerMethod, null))
                {
                    Debug.LogWarning($"[SteamCallbackManager] Could not find handler method {handlerMethodName} with parameter {callbackDataType.Name}");
                    return false;
                }
                // Fix: Use correct overload for static method
                var handler = Delegate.CreateDelegate(dispatchDelegateType, null, handlerMethod);
                // Find a suitable constructor: (DispatchDelegate, bool) or (DispatchDelegate) or static Create method
                object callbackInstance = null;
                var ctors = genericCallbackType.GetConstructors();
                bool foundCtor = false;
                foreach (var ctor in ctors)
                {
                    var parameters = ctor.GetParameters();
                    if (parameters.Length.Equals(2) && parameters[0].ParameterType.Equals(dispatchDelegateType) && parameters[1].ParameterType.Equals(typeof(bool)))
                    {
                        callbackInstance = ctor.Invoke(new object[] { handler, false });
                        foundCtor = true;
                        break;
                    }
                    if (parameters.Length.Equals(1) && parameters[0].ParameterType.Equals(dispatchDelegateType))
                    {
                        callbackInstance = ctor.Invoke(new object[] { handler });
                        foundCtor = true;
                        break;
                    }
                }
                // If no constructor found, try static Create method
                if (!foundCtor || ReferenceEquals(callbackInstance, null))
                {
                    var createMethod = genericCallbackType.GetMethod("Create", BindingFlags.Public | BindingFlags.Static);
                    if (!ReferenceEquals(createMethod, null))
                    {
                        var createParams = createMethod.GetParameters();
                        if (createParams.Length.Equals(1) && createParams[0].ParameterType.Equals(dispatchDelegateType))
                        {
                            callbackInstance = createMethod.Invoke(null, new object[] { handler });
                            foundCtor = !ReferenceEquals(callbackInstance, null);
                        }
                    }
                }
                // Log available constructors and static methods if still not found
                if (!foundCtor || ReferenceEquals(callbackInstance, null))
                {
                    Debug.LogWarning($"[SteamCallbackManager] Could not find suitable constructor or static Create method for {genericCallbackType.Name}");
                    Debug.LogWarning($"[SteamCallbackManager] Available constructors:");
                    foreach (var ctor in ctors)
                    {
                        var paramTypes = string.Join(", ", ctor.GetParameters().Select(p => p.ParameterType.Name).ToArray());
                        Debug.LogWarning($"[SteamCallbackManager]   {genericCallbackType.Name}({paramTypes})");
                    }
                    var staticMethods = genericCallbackType.GetMethods(BindingFlags.Public | BindingFlags.Static);
                    foreach (var method in staticMethods)
                    {
                        var paramTypes = string.Join(", ", method.GetParameters().Select(p => p.ParameterType.Name).ToArray());
                        Debug.LogWarning($"[SteamCallbackManager]   static {method.Name}({paramTypes})");
                    }
                    return false;
                }
                // Store callback handle to prevent GC
                if (callbackDataType.Name.Contains("Lobby"))
                {
                    lobbyJoinCallback = callbackInstance;
                }
                else if (callbackDataType.Name.Contains("RichPresence"))
                {
                    richPresenceJoinCallback = callbackInstance;
                }
                Debug.Log($"[SteamCallbackManager] Successfully registered callback for {callbackDataType.Name}");
                return true;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error registering callback for {callbackDataType.Name}: {ex.Message}\n{ex.StackTrace}");
                return false;
            }
        }

        // --- BEGIN: Fix for Steamworks callback registration ---
        // Handler for GameLobbyJoinRequested_t
        private static void OnGameLobbyJoinRequested(Steamworks.GameLobbyJoinRequested_t param)
        {
            Debug.Log("[SteamCallbackManager] OnGameLobbyJoinRequested called");
            if (!ReferenceEquals(param, null))
            {
                var lobbyIdField = param.GetType().GetField("m_steamIDLobby") ?? param.GetType().GetField("m_ulSteamIDLobby") ?? param.GetType().GetField("m_SteamIDLobby") ?? param.GetType().GetField("lobbyID");
                if (!ReferenceEquals(lobbyIdField, null))
                {
                    var value = lobbyIdField.GetValue(param);
                    if (!ReferenceEquals(value, null) && ulong.TryParse(value.ToString(), out ulong lobbyId))
                    {
                        Debug.Log($"[SteamCallbackManager] Join requested for lobby: {lobbyId}");
                        ProcessLobbyJoinRequest(lobbyId);
                    }
                }
            }
        }
        // Handler for GameRichPresenceJoinRequested_t
        private static void OnGameRichPresenceJoinRequested(Steamworks.GameRichPresenceJoinRequested_t param)
        {
            Debug.Log("[SteamCallbackManager] OnGameRichPresenceJoinRequested called");
            // You can implement additional logic here if needed
        }
        // --- END: Fix for Steamworks callback registration ---


        private static MethodInfo CreateTypedWrapperMethod(Type callbackDataType, MethodInfo handlerMethod)
        {
            try
            {
                // Create a dynamic method that converts the typed parameter to object and calls our handler
                var dynamicMethod = new System.Reflection.Emit.DynamicMethod(
                    $"TypedWrapper_{callbackDataType.Name}",
                    typeof(void),
                    new[] { callbackDataType },
                    typeof(SteamCallbackManager),
                    true);

                var il = dynamicMethod.GetILGenerator();
                
                // Load the parameter and box it if needed
                il.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);
                if (callbackDataType.IsValueType)
                {
                    il.Emit(System.Reflection.Emit.OpCodes.Box, callbackDataType);
                }
                
                // Call the handler method
                il.Emit(System.Reflection.Emit.OpCodes.Call, handlerMethod);
                il.Emit(System.Reflection.Emit.OpCodes.Ret);

                return dynamicMethod;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error creating typed wrapper method: {ex.Message}");
                return null;
            }
        }

        private static object CreateCallbackInstance(Type genericCallbackType, Type dispatchDelegateType, Delegate delegateInstance)
        {
            try
            {
                // Try constructor with (DispatchDelegate, bool) signature first
                var ctorWithBool = genericCallbackType.GetConstructor(new[] { dispatchDelegateType, typeof(bool) });
                if (ctorWithBool != null)
                {
                    Debug.Log($"[SteamCallbackManager] Using constructor with bool parameter");
                    return ctorWithBool.Invoke(new object[] { delegateInstance, false });
                }

                // Try constructor with just (DispatchDelegate) signature
                var ctorWithoutBool = genericCallbackType.GetConstructor(new[] { dispatchDelegateType });
                if (ctorWithoutBool != null)
                {
                    Debug.Log($"[SteamCallbackManager] Using constructor without bool parameter");
                    return ctorWithoutBool.Invoke(new object[] { delegateInstance });
                }

                // Try static Create method as fallback (newer Steamworks.NET versions)
                var createMethod = genericCallbackType.GetMethod("Create", BindingFlags.Public | BindingFlags.Static);
                if (createMethod != null)
                {
                    var createParams = createMethod.GetParameters();
                    if (createParams.Length == 1 && createParams[0].ParameterType.IsAssignableFrom(dispatchDelegateType))
                    {
                        Debug.Log($"[SteamCallbackManager] Using static Create method");
                        return createMethod.Invoke(null, new object[] { delegateInstance });
                    }
                }

                Debug.LogError($"[SteamCallbackManager] No suitable constructor or Create method found");
                return null;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error creating callback instance: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Steam callback handler for GameLobbyJoinRequested_t (Steam overlay invite).
        /// </summary>
        // private static void OnGameLobbyJoinRequested(object param)
        // {
        //     Debug.Log("[SteamCallbackManager] *** OnGameLobbyJoinRequested called! ***");
            
        //     if (param == null)
        //     {
        //         Debug.LogWarning("[SteamCallbackManager] OnGameLobbyJoinRequested: param is null");
        //         return;
        //     }
            
        //     try
        //     {
        //         Debug.Log($"[SteamCallbackManager] OnGameLobbyJoinRequested param type: {param.GetType().FullName}");

        //         ulong lobbyId = 0;
        //         var type = param.GetType();
                
        //         // Debug: List all fields in the parameter
        //         Debug.Log("[SteamCallbackManager] Available fields in parameter:");
        //         foreach (var field in type.GetFields())
        //         {
        //             Debug.Log($"[SteamCallbackManager] - {field.Name}: {field.FieldType.Name}");
        //         }

        //         var lobbyIdField = type.GetField("m_ulSteamIDLobby") ?? 
        //                           type.GetField("m_SteamIDLobby") ?? 
        //                           type.GetField("lobbyID") ?? 
        //                           type.GetField("m_steamIDLobby") ?? 
        //                           type.GetField("steamIDLobby");
                                  
        //         if (lobbyIdField != null)
        //         {
        //             var value = lobbyIdField.GetValue(param);
        //             Debug.Log($"[SteamCallbackManager] Found lobby ID field '{lobbyIdField.Name}' with value: {value} (type: {value?.GetType().Name})");
                    
        //             if (value is ulong ul)
        //                 lobbyId = ul;
        //             else if (value != null && ulong.TryParse(value.ToString(), out ulong parsed))
        //                 lobbyId = parsed;
        //         }
        //         else
        //         {
        //             Debug.LogWarning("[SteamCallbackManager] Could not find lobby ID field in callback parameter");
        //         }

        //         if (!lobbyId.Equals(0UL))
        //         {
        //             Debug.Log($"[SteamCallbackManager] Extracted lobby ID: {lobbyId}");
                    
        //             var networking = ETGSteamP2PNetworking.Instance;
        //             if (!ReferenceEquals(networking, null))
        //             {
        //                 Debug.Log($"[SteamCallbackManager] [DEBUG] Using ETGSteamP2PNetworking.Instance.JoinLobby(lobbyId={lobbyId})");
        //                 networking.JoinLobby(lobbyId);
        //                 return;
        //             }
        //             Debug.LogWarning("[SteamCallbackManager] ETGSteamP2PNetworking.Instance is null");
        //             return;
        //         }
        //         Debug.LogWarning("[SteamCallbackManager] OnGameLobbyJoinRequested: Could not parse lobbyId from value (expected ulong)");
        //     }
        //     catch (Exception ex)
        //     {
        //         Debug.LogError($"[SteamCallbackManager] Exception in OnGameLobbyJoinRequested: {ex.Message}\n{ex.StackTrace}");
        //     }
        // }

        // /// <summary>
        // /// Steam callback handler for GameRichPresenceJoinRequested_t (Steam overlay join via friend list).
        // /// </summary>
        // private static void OnGameRichPresenceJoinRequested(object param)
        // {
        //     Debug.Log("[SteamCallbackManager] *** OnGameRichPresenceJoinRequested called! ***");
            
        //     try
        //     {
        //         if (param == null)
        //         {
        //             Debug.LogWarning("[SteamCallbackManager] OnGameRichPresenceJoinRequested: param is null");
        //             return;
        //         }

        //         Debug.Log($"[SteamCallbackManager] OnGameRichPresenceJoinRequested param type: {param.GetType().FullName}");
                
        //         ulong steamId = 0;
        //         var type = param.GetType();
                
        //         // Debug: List all fields in the parameter
        //         Debug.Log("[SteamCallbackManager] Available fields in parameter:");
        //         foreach (var field in type.GetFields())
        //         {
        //             Debug.Log($"[SteamCallbackManager] - {field.Name}: {field.FieldType.Name}");
        //         }
                
        //         var steamIdField = type.GetField("m_steamIDFriend") ?? 
        //                           type.GetField("steamIDFriend") ?? 
        //                           type.GetField("m_steamID") ?? 
        //                           type.GetField("steamID") ?? 
        //                           type.GetField("m_ulSteamIDFriend") ?? 
        //                           type.GetField("ulSteamIDFriend");
                                  
        //         if (steamIdField != null)
        //         {
        //             var value = steamIdField.GetValue(param);
        //             Debug.Log($"[SteamCallbackManager] Found steam ID field '{steamIdField.Name}' with value: {value} (type: {value?.GetType().Name})");
                    
        //             if (value is ulong ul)
        //                 steamId = ul;
        //             else if (value != null && ulong.TryParse(value.ToString(), out ulong parsed))
        //                 steamId = parsed;
        //         }
        //         else
        //         {
        //             Debug.LogWarning("[SteamCallbackManager] Could not find steam ID field in callback parameter");
        //         }

        //         if (!steamId.Equals(0UL))
        //         {
        //             Debug.Log($"[SteamCallbackManager] OnGameRichPresenceJoinRequested: Triggering overlay join for Steam ID {steamId}");
        //             TriggerOverlayJoinEvent(steamId.ToString());
        //         }
        //         else
        //         {
        //             Debug.LogWarning("[SteamCallbackManager] OnGameRichPresenceJoinRequested: Could not extract Steam ID");
        //         }
        //     }
        //     catch (Exception ex)
        //     {
        //         Debug.LogError("[SteamCallbackManager] Error handling Rich Presence join request: " + ex.Message);
        //     }
        // }

        /// <summary>
        /// Extracts the lobby ID from the callback parameter using reflection.
        /// </summary>
        private static bool TryGetLobbyId(object param, out ulong lobbyId)
        {
            lobbyId = 0;

            if (ReferenceEquals(param, null))
            {
                Debug.LogWarning("[SteamCallbackManager] OnLobbyEnter: param is null");
                return false;
            }

            var type = param.GetType();
            var lobbyIdField = type.GetField("m_ulSteamIDLobby") ??
                                type.GetField("m_SteamIDLobby") ??
                                type.GetField("lobbyID");

            if (ReferenceEquals(lobbyIdField, null))
            {
                Debug.LogWarning("[SteamCallbackManager] OnLobbyEnter: Could not find lobbyId field via reflection");
                return false;
            }

            var value = lobbyIdField.GetValue(param);

            // Accept ulong or parse from string
            return value switch
            {
                ulong ul => (lobbyId = ul) > 0,
                _ when value != null && ulong.TryParse(value.ToString(), out lobbyId) => lobbyId > 0,
                _ => false
            };
        }

        /// <summary>
        /// Gets the Steam matchmaking methods for lobby member enumeration via reflection.
        /// </summary>
        private static bool TryGetMatchmakingMethods(out MethodInfo getNumMembersMethod, out MethodInfo getMemberByIndexMethod)
        {
            getNumMembersMethod = null;
            getMemberByIndexMethod = null;

            var steamworksAssembly = SteamReflectionHelper.GetSteamworksAssembly();
            var matchmakingType = steamworksAssembly?.GetType("Steamworks.SteamMatchmaking", false);

            if (matchmakingType == null)
            {
                Debug.LogWarning("[SteamCallbackManager] Could not find SteamMatchmaking type");
                return false;
            }

            getNumMembersMethod = matchmakingType.GetMethod("GetNumLobbyMembers");
            getMemberByIndexMethod = matchmakingType.GetMethod("GetLobbyMemberByIndex");

            return getNumMembersMethod != null && getMemberByIndexMethod != null;
        }

        /// <summary>
        /// Connects to all lobby members except self using Steam P2P networking.
        /// </summary>
        private static void ConnectToLobbyMembers(object csteamId, MethodInfo getNumMembersMethod, MethodInfo getMemberByIndexMethod)
        {
            // Get member count
            if (!TryInvokeMethod(getNumMembersMethod, new[] { csteamId }, out int memberCount))
            {
                Debug.LogError("[SteamCallbackManager] Failed to get lobby member count");
                return;
            }

            var mySteamId = SteamReflectionHelper.GetSteamID();
            var networking = ETGSteamP2PNetworking.Instance;

            if (networking == null)
            {
                Debug.LogWarning("[SteamCallbackManager] ETGSteamP2PNetworking.Instance is null");
                return;
            }

            // Connect to each member except self
            for (int i = 0; i < memberCount; i++)
            {
                if (TryGetMemberSteamId(getMemberByIndexMethod, csteamId, i, out ulong memberSteamId) &&
                    memberSteamId != 0 &&
                    memberSteamId != mySteamId)
                {
                    // Removed legacy AcceptP2PSession call
                }
            }
        }

        /// <summary>
        /// Gets the Steam ID of a lobby member at the given index.
        /// </summary>
        private static bool TryGetMemberSteamId(MethodInfo getMemberByIndexMethod, object csteamId, int index, out ulong memberSteamId)
        {
            memberSteamId = 0;

            if (!TryInvokeMethod(getMemberByIndexMethod, new[] { csteamId, index }, out object memberSteamIdObj))
            {
                Debug.LogError($"[SteamCallbackManager] Failed to get lobby member at index {index}");
                return false;
            }

            return memberSteamIdObj switch
            {
                ulong msi => (memberSteamId = msi) > 0,
                _ when memberSteamIdObj != null => TryExtractSteamIdFromObject(memberSteamIdObj, out memberSteamId),
                _ => false
            };
        }

        /// <summary>
        /// Extracts a Steam ID from a lobby member object using property or string parsing.
        /// </summary>
        private static bool TryExtractSteamIdFromObject(object steamIdObj, out ulong steamId)
        {
            steamId = 0;

            // Try to get m_SteamID property
            var steamIdProp = steamIdObj.GetType().GetProperty("m_SteamID");
            if (steamIdProp != null)
            {
                steamId = (ulong)steamIdProp.GetValue(steamIdObj, null);
                return steamId > 0;
            }

            // Fallback to string parsing
            return ulong.TryParse(steamIdObj.ToString(), out steamId) && steamId > 0;
        }

        /// <summary>
        /// Invokes a MethodInfo and returns the result as type T.
        /// </summary>
        private static bool TryInvokeMethod<T>(MethodInfo method, object[] parameters, out T result)
        {
            result = default(T);

            try
            {
                var returnValue = method.Invoke(null, parameters);
                if (returnValue is T typedResult)
                {
                    result = typedResult;
                    return true;
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Exception calling {method.Name}: {ex.Message}");
            }

            return false;
        }

        /// <summary>
        /// Process Steam callbacks
        /// </summary>
        public static void ProcessSteamCallbacks()
        {
            try
            {
                if (!ReferenceEquals(runCallbacksMethod, null))
                {
                    runCallbacksMethod.Invoke(null, null);
                }

                if (pendingJoinRequests.Count > 0 || pendingOverlayJoinRequests.Count > 0)
                {
                    Debug.Log("[ETGSteamP2P] Processing pending join requests...");
                    ProcessPendingJoinRequests();
                }

                SteamFallbackDetection.ProcessFallbackDetection();
                CheckForSteamJoinRequests();
            }
            catch (Exception ex)
            {
            }


        }

        private static void CheckForSteamJoinRequests()
        {
            try
            {
                // Periodic checks can be added here if needed
            }
            catch (Exception ex)
            {
                if (Time.frameCount % 1800 == 0)
                {
                    Debug.LogWarning("[ETGSteamP2P] Error checking for Steam join requests: " + ex.Message);
                }
            }
        }

        /// <summary>
        /// Get callback status
        /// </summary>
        public static string GetCallbackStatus()
        {
            try
            {
                string status = "[ETGSteamP2P] Callback Status:\n";
                status += $"  Callbacks Registered: {joinCallbacksRegistered}\n";
                status += $"  Using Fallback Detection: {SteamFallbackDetection.IsUsingFallbackDetection}\n";
                status += "  RunCallbacks Method: " + (!ReferenceEquals(runCallbacksMethod, null) ? "‚úÖ" : "‚ùå") + "\n";
                status += "  Lobby Callback Handle: " + (!ReferenceEquals(lobbyCallbackHandle, null) ? "‚úÖ" : "‚ùå") + "\n";
                status += "  Overlay Callback Handle: " + (!ReferenceEquals(overlayCallbackHandle, null) ? "‚úÖ" : "‚ùå") + "\n";
                status += "  Steam Callback Handle: " + (!ReferenceEquals(steamCallbackHandle, null) ? "‚úÖ" : "‚ùå") + "\n";
                return status;
            }
            catch (Exception ex)
            {
                return "[ETGSteamP2P] Error getting callback status: " + ex.Message;
            }
        }

        /// <summary>
        /// Trigger overlay join event
        /// </summary>
        public static void TriggerOverlayJoinEvent(string hostSteamId)
        {
            try
            {
                Debug.Log("[ETGSteamP2P] Triggering overlay join event for host: " + hostSteamId);
                OnOverlayJoinRequested?.Invoke(hostSteamId);
            }
            catch (Exception ex)
            {
                Debug.LogError("[ETGSteamP2P] Error triggering overlay join event: " + ex.Message);
            }
        }

        /// <summary>
        /// Trigger join requested event
        /// </summary>
        public static void TriggerJoinRequested(ulong steamId)
        {
            try
            {
                if (ReferenceEquals(OnJoinRequested, null))
                {
                    Debug.LogWarning($"[SteamCallbackManager] TriggerJoinRequested: OnJoinRequested event is null. steamId={steamId}");
                    return;
                }
                Debug.Log($"[SteamCallbackManager] TriggerJoinRequested: Invoking OnJoinRequested for steamId={steamId}");
                OnJoinRequested(steamId);
            }
            catch (Exception ex)
            {
                Debug.LogError("[SteamCallbackManager] Exception in TriggerJoinRequested: " + ex.Message);
            }
        }

        /// <summary>
        /// Check if callbacks are registered
        /// </summary>
        public static bool AreCallbacksRegistered
        {
            get { return joinCallbacksRegistered; }
        }


        private static void TryExtractSteamIdFromUrl(string url)
        {
            try
            {
                MatchCollection matches = Regex.Matches(url, @"\d{17}");
                foreach (Match match in matches)
                {
                    if (ulong.TryParse(match.Value, out ulong steamId) && steamId > 76561197960265728UL)
                    {
                        Debug.Log($"[ETGSteamP2P] Extracted Steam ID from URL: {steamId}");
                        pendingJoinRequests.Enqueue(steamId);
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogWarning("[ETGSteamP2P] Error extracting Steam ID from URL: " + ex.Message);
            }
        }

        /// <summary>
        /// Process pending join requests
        /// </summary>
        public static void ProcessPendingJoinRequests()
        {
            try
            {
                while (pendingJoinRequests.Count > 0)
                {
                    ulong steamId = pendingJoinRequests.Dequeue();
                    Debug.Log($"[ETGSteamP2P] Processing pending join request for Steam ID: {steamId}");
                    OnJoinRequested?.Invoke(steamId);
                }

                while (pendingOverlayJoinRequests.Count > 0)
                {
                    string hostSteamId = pendingOverlayJoinRequests.Dequeue();
                    Debug.Log("[ETGSteamP2P] Processing pending overlay join request for host: " + hostSteamId);
                    OnOverlayJoinRequested?.Invoke(hostSteamId);
                }
            }
            catch (Exception ex)
            {
                Debug.LogError("[ETGSteamP2P] Error processing pending join requests: " + ex.Message);
            }
        }

        /// <summary>
        /// Check for pending session requests
        /// </summary>
        public static bool CheckForPendingSessionRequests(out ulong requestingSteamId)
        {
            requestingSteamId = 0;
            try
            {
                if (pendingJoinRequests.Count > 0)
                {
                    requestingSteamId = pendingJoinRequests.Peek();
                    Debug.Log($"[SteamCallbackManager] Found pending session request from Steam ID: {requestingSteamId}");
                    return true;
                }
                else if (TryDetectIncomingP2PConnections(out requestingSteamId))
                {
                    Debug.Log($"[SteamCallbackManager] Detected incoming P2P connection from Steam ID: {requestingSteamId}");
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Debug.LogError("[SteamCallbackManager] Error checking pending requests: " + ex.Message);
                return false;
            }
        }

        private static bool TryDetectIncomingP2PConnections(out ulong requestingSteamId)
        {
            requestingSteamId = 0;
            try
            {
                Assembly steamworksAssembly = SteamReflectionHelper.GetSteamworksAssembly();
                if (ReferenceEquals(steamworksAssembly, null))
                {
                    return false;
                }

                Type steamNetworkingType = steamworksAssembly.GetType("Steamworks.SteamNetworking", false);
                if (ReferenceEquals(steamNetworkingType, null))
                {
                    return false;
                }

                MethodInfo isP2PPacketAvailableMethod = steamNetworkingType.GetMethod("IsP2PPacketAvailable", BindingFlags.Public | BindingFlags.Static);
                if (!ReferenceEquals(isP2PPacketAvailableMethod, null))
                {
                    uint msgSize = 0;
                    int channel = 0;
                    object[] args = new object[] { msgSize, channel };
                    object result = isP2PPacketAvailableMethod.Invoke(null, args);

                    bool hasPacket = result is bool && (bool)result;
                    if (hasPacket)
                    {
                        MethodInfo readP2PPacketMethod = steamNetworkingType.GetMethod("ReadP2PPacket", BindingFlags.Public | BindingFlags.Static);
                        if (!ReferenceEquals(readP2PPacketMethod, null))
                        {
                            msgSize = Convert.ToUInt32(args[0]);
                            if (msgSize > 0)
                            {
                                byte[] buffer = new byte[msgSize];
                                uint bytesRead = 0;
                                uint msgSizeOut = 0;
                                ulong remoteSteamId = 0;
                                object[] readArgs = new object[] { buffer, msgSize, bytesRead, remoteSteamId, msgSizeOut };

                                object readResult = readP2PPacketMethod.Invoke(null, readArgs);
                                bool readSuccess = readResult is bool && (bool)readResult;

                                if (readSuccess)
                                {
                                    requestingSteamId = Convert.ToUInt64(readArgs[3]);
                                    Debug.Log($"[SteamCallbackManager] Detected packet from potential joiner: {requestingSteamId}");

                                    if (!pendingJoinRequests.Contains(requestingSteamId))
                                    {
                                        pendingJoinRequests.Enqueue(requestingSteamId);
                                    }
                                    return true;
                                }
                            }
                        }
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                Debug.LogError("[SteamCallbackManager] Error detecting incoming P2P connections: " + ex.Message);
                return false;
            }
        }
        public static void LogSteamworksAssemblyInfo()
        {
            try
            {
                var steamworksAssembly = SteamReflectionHelper.GetSteamworksAssembly();
                if (ReferenceEquals(steamworksAssembly, null))
                {
                    UnityEngine.Debug.LogWarning("[ETGSteamP2P] Steamworks assembly not found in LogSteamworksAssemblyInfo");
                    return;
                }
                UnityEngine.Debug.Log($"[ETGSteamP2P] Steamworks assembly: {steamworksAssembly.FullName} location: {steamworksAssembly.Location}");
                foreach (var type in steamworksAssembly.GetTypes())
                {
                    if (type.Name.Contains("Lobby") || type.Name.Contains("Join") || type.Name.Contains("Callback"))
                    {
                        UnityEngine.Debug.Log($"[ETGSteamP2P] Type: {type.FullName}");
                    }
                }
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError("[ETGSteamP2P] Exception in LogSteamworksAssemblyInfo: " + ex.Message);
            }
        }

        /// <summary>
        /// Steam callback handler for LobbyEnter_t. Handles lobby connection logic for both host and joiners.
        /// </summary>
        private static void OnLobbyEnter(object param)
        {
            Debug.Log($"[SteamCallbackManager] OnLobbyEnter called! param type: {(param == null ? "null" : param.GetType().FullName)}");

            try
            {
                // Extract lobby ID from callback parameter (reflection)
                if (!TryGetLobbyId(param, out ulong lobbyId))
                {
                    Debug.LogWarning("[SteamCallbackManager] OnLobbyEnter: Failed to extract lobby ID");
                    return;
                }

                Debug.Log($"[SteamCallbackManager] OnLobbyEnter: Extracted Lobby ID: {lobbyId} (type: {lobbyId.GetType().FullName})");

                // Get current user's Steam ID
                ulong mySteamId = SteamReflectionHelper.GetSteamID();

                // Get Steam matchmaking reflection methods
                if (!TryGetMatchmakingMethods(out var getNumMembersMethod, out var getMemberByIndexMethod))
                {
                    Debug.LogWarning("[SteamCallbackManager] OnLobbyEnter: Failed to get matchmaking methods");
                    return;
                }

                // Convert lobbyId to CSteamID object
                var csteamId = SteamReflectionHelper.ConvertToCSteamID(lobbyId);
                if (csteamId == null)
                {
                    Debug.LogWarning("[SteamCallbackManager] OnLobbyEnter: Failed to convert lobby ID to CSteamID");
                    return;
                }

                // Handle logic for both host and joiners
                if (SteamHostManager.IsCurrentlyHosting)
                {
                    HandleHostLobbyEnter(csteamId, getNumMembersMethod, getMemberByIndexMethod, mySteamId);
                }
                else
                {
                    HandleJoinerLobbyEnter(csteamId, getNumMembersMethod, getMemberByIndexMethod, mySteamId);
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error in OnLobbyEnter: {ex.Message}\n{ex.StackTrace}");
            }
        }

        /// <summary>
        /// Handles lobby enter logic for the host - notifies about new members
        /// </summary>
        private static void HandleHostLobbyEnter(object csteamId, MethodInfo getNumMembersMethod, MethodInfo getMemberByIndexMethod, ulong hostSteamId)
        {
            Debug.Log("[SteamCallbackManager] HandleHostLobbyEnter: Processing as host");

            // Get current member count
            if (!TryInvokeMethod(getNumMembersMethod, new[] { csteamId }, out int memberCount))
            {
                Debug.LogError("[SteamCallbackManager] Failed to get lobby member count");
                return;
            }

            Debug.Log($"[SteamCallbackManager] Current lobby member count: {memberCount}");

            // List all current members and identify new ones
            var currentMembers = new List<ulong>();
            for (int i = 0; i < memberCount; i++)
            {
                if (TryGetMemberSteamId(getMemberByIndexMethod, csteamId, i, out ulong memberSteamId) && memberSteamId != 0)
                {
                    currentMembers.Add(memberSteamId);

                    // If this member is not the host, they're a joiner
                    if (memberSteamId != hostSteamId)
                    {
                        Debug.Log($"[SteamCallbackManager] Player {memberSteamId} has joined the lobby!");

                        // Notify the host UI/game logic about the new player
                        NotifyHostOfNewPlayer(memberSteamId);

                        // Accept P2P session with the new player
                        AcceptP2PSessionWithPlayer(memberSteamId);
                    }
                }
            }
        }

        /// <summary>
        /// Handles lobby enter logic for joiners - connects to existing members
        /// </summary>
        private static void HandleJoinerLobbyEnter(object csteamId, MethodInfo getNumMembersMethod, MethodInfo getMemberByIndexMethod, ulong joinerSteamId)
        {
            Debug.Log("[SteamCallbackManager] HandleJoinerLobbyEnter: Processing as joiner");

            // Log the join event for analytics/debugging
            SteamHostManager.LogPlayerJoinedViaInviteOrOverlay(joinerSteamId);

            // Connect to all existing lobby members
            ConnectToLobbyMembers(csteamId, getNumMembersMethod, getMemberByIndexMethod, joinerSteamId);
        }

        /// <summary>
        /// Connects to all lobby members except self using Steam P2P networking.
        /// </summary>
        private static void ConnectToLobbyMembers(object csteamId, MethodInfo getNumMembersMethod, MethodInfo getMemberByIndexMethod, ulong mySteamId)
        {
            // Get member count
            if (!TryInvokeMethod(getNumMembersMethod, new[] { csteamId }, out int memberCount))
            {
                Debug.LogError("[SteamCallbackManager] Failed to get lobby member count");
                return;
            }

            Debug.Log($"[SteamCallbackManager] Connecting to {memberCount} lobby members");

            // Connect to each member except self
            for (int i = 0; i < memberCount; i++)
            {
                if (TryGetMemberSteamId(getMemberByIndexMethod, csteamId, i, out ulong memberSteamId) &&
                    memberSteamId != 0 &&
                    memberSteamId != mySteamId)
                {
                    Debug.Log($"[SteamCallbackManager] Attempting to connect to member: {memberSteamId}");

                    // Accept P2P session with this member
                    AcceptP2PSessionWithPlayer(memberSteamId);

                    // Optionally send a handshake packet
                    SendHandshakePacket(memberSteamId);
                }
            }
        }

        /// <summary>
        /// Notifies the host's game logic that a new player has joined
        /// </summary>
        private static void NotifyHostOfNewPlayer(ulong newPlayerSteamId)
        {
            try
            {
                // Get player name if possible
                string playerName = GetPlayerName(newPlayerSteamId);
                Debug.Log($"[SteamCallbackManager] {playerName} has joined!");

                // Notify your game's UI/logic about the new player
                // Replace this with your actual notification method
                if (SteamHostManager.OnPlayerJoined != null)
                {
                    SteamHostManager.OnPlayerJoined.Invoke(newPlayerSteamId, playerName);
                }

                // You might also want to update a player list UI here
                // UpdatePlayerListUI();
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error notifying host of new player: {ex.Message}");
            }
        }

        /// <summary>
        /// Accepts P2P session with a specific player
        /// </summary>
        private static void AcceptP2PSessionWithPlayer(ulong playerSteamId)
        {
            try
            {
                var networking = ETGSteamP2PNetworking.Instance;
                if (networking == null)
                {
                    Debug.LogWarning("[SteamCallbackManager] ETGSteamP2PNetworking.Instance is null");
                    return;
                }

                // Use reflection to call AcceptP2PSessionWithUser if it exists
                var acceptMethod = networking.GetType().GetMethod("AcceptP2PSessionWithUser") ??
                                networking.GetType().GetMethod("AcceptP2PSession");

                if (acceptMethod != null)
                {
                    var playerCSteamId = SteamReflectionHelper.ConvertToCSteamID(playerSteamId);
                    if (playerCSteamId != null)
                    {
                        acceptMethod.Invoke(networking, new[] { playerCSteamId });
                        Debug.Log($"[SteamCallbackManager] Accepted P2P session with player: {playerSteamId}");
                    }
                }
                else
                {
                    Debug.LogWarning("[SteamCallbackManager] Could not find AcceptP2PSession method");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error accepting P2P session: {ex.Message}");
            }
        }

        /// <summary>
        /// Sends a handshake packet to establish connection
        /// </summary>
        private static void SendHandshakePacket(ulong targetSteamId)
        {
            try
            {
                var networking = ETGSteamP2PNetworking.Instance;
                if (networking == null) return;

                // Send a simple handshake packet to establish the connection
                // You'll need to implement this based on your networking setup
                // This is just a placeholder for the concept

                Debug.Log($"[SteamCallbackManager] Sending handshake to: {targetSteamId}");

                // Example: networking.SendHandshake(targetSteamId);
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error sending handshake: {ex.Message}");
            }
        }

        /// <summary>
        /// Gets a player's display name from Steam
        /// </summary>
        private static string GetPlayerName(ulong steamId)
        {
            try
            {
                // Use Steam Friends API to get the player name
                var steamworksAssembly = SteamReflectionHelper.GetSteamworksAssembly();
                var friendsType = steamworksAssembly?.GetType("Steamworks.SteamFriends", false);
                var getNameMethod = friendsType?.GetMethod("GetFriendPersonaName");

                if (getNameMethod != null)
                {
                    var playerCSteamId = SteamReflectionHelper.ConvertToCSteamID(steamId);
                    if (playerCSteamId != null)
                    {
                        var name = getNameMethod.Invoke(null, new[] { playerCSteamId }) as string;
                        return !string.IsNullOrEmpty(name) ? name : $"Player_{steamId}";
                    }
                }

                return $"Player_{steamId}";
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error getting player name: {ex.Message}");
                return $"Player_{steamId}";
            }
        }

        /// <summary>
        /// Handles Steam LobbyDataUpdate_t callback for join detection (moved from SteamHostManager).
        /// </summary>
        private static void OnLobbyDataUpdate(object callbackData)
        {
            Debug.Log("[SteamCallbackManager] OnLobbyDataUpdate: ENTERED");
            try
            {
                if (ReferenceEquals(callbackData, null))
                {
                    Debug.LogWarning("[SteamCallbackManager] OnLobbyDataUpdate: callbackData is null");
                    return;
                }

                var type = callbackData.GetType();

                // Extract lobbyId, memberId, and success flag
                ulong lobbyId = 0;
                ulong memberId = 0;
                bool success = false;

                var lobbyIdField = type.GetField("m_ulSteamIDLobby") ?? type.GetField("m_SteamIDLobby") ?? type.GetField("lobbyID");
                var memberIdField = type.GetField("m_ulSteamIDMember") ?? type.GetField("m_SteamIDMember") ?? type.GetField("memberID");
                var successField = type.GetField("m_bSuccess") ?? type.GetField("bSuccess") ?? type.GetField("Success");

                if (!ReferenceEquals(lobbyIdField, null))
                {
                    var value = lobbyIdField.GetValue(callbackData);
                    if (value is ulong ul)
                        lobbyId = ul;
                    else if (!ReferenceEquals(value, null) && ulong.TryParse(value.ToString(), out ulong parsed))
                        lobbyId = parsed;
                }
                if (!ReferenceEquals(memberIdField, null))
                {
                    var value = memberIdField.GetValue(callbackData);
                    if (value is ulong ul)
                        memberId = ul;
                    else if (!ReferenceEquals(value, null) && ulong.TryParse(value.ToString(), out ulong parsed))
                        memberId = parsed;
                }
                if (!ReferenceEquals(successField, null))
                {
                    var value = successField.GetValue(callbackData);
                    if (!ReferenceEquals(value, null))
                    {
                        if (value is bool b)
                        {
                            success = b;
                        }
                        else if (value is byte by)
                        {
                            success = !by.Equals((byte)0);
                        }
                        else if (value is int i)
                        {
                            success = !i.Equals(0);
                        }
                        else if (bool.TryParse(value.ToString(), out bool parsed))
                        {
                            success = parsed;
                        }
                        // If value is string or other type, try to parse as bool
                        else
                        {
                            success = value.ToString().Equals("true", StringComparison.OrdinalIgnoreCase);
                        }
                    }
                }

                if (!lobbyId.Equals(0UL))
                {
                    ulong mySteamId = SteamReflectionHelper.GetSteamID();
                    Debug.Log($"[SteamCallbackManager] [LobbyDataUpdate] Host SteamID: {mySteamId}, Detected memberId: {memberId}, LobbyID: {lobbyId}");
                    if (memberId.Equals(lobbyId))
                    {
                        Debug.Log($"[SteamCallbackManager] [LobbyDataUpdate] Skipping event: memberId equals lobbyId ({lobbyId})");
                    }
                    else if (!memberId.Equals(0UL) && !memberId.Equals(mySteamId))
                    {
                        Debug.Log($"[SteamCallbackManager] [LobbyDataUpdate] Detected new player joined lobby: {memberId} (not host)");
                        // (No join logic here, just for diagnostics)
                    }
                    else
                    {
                        Debug.Log($"[SteamCallbackManager] [LobbyDataUpdate] Ignoring join event for self (SteamID: {mySteamId})");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error in OnLobbyDataUpdate: {ex.Message}\n{ex.StackTrace}");
            }
        }

        /// <summary>
        /// Handles Steam LobbyChatUpdate_t callback for robust join/leave detection.
        /// </summary>
        private static void OnLobbyChatUpdate(object callbackData)
        {
            Debug.Log("[SteamCallbackManager] OnLobbyChatUpdate: ENTERED");
            try
            {
                if (ReferenceEquals(callbackData, null))
                {
                    Debug.LogWarning("[SteamCallbackManager] OnLobbyChatUpdate: callbackData is null");
                    return;
                }

                var type = callbackData.GetType();

                // Extract lobbyId, userChanged, userMakingChange, and stateChange
                ulong lobbyId = 0;
                ulong userChanged = 0;
                ulong userMakingChange = 0;
                uint stateChange = 0;

                var lobbyIdField = type.GetField("m_ulSteamIDLobby") ?? type.GetField("m_SteamIDLobby") ?? type.GetField("lobbyID");
                var userChangedField = type.GetField("m_ulSteamIDUserChanged") ?? type.GetField("m_SteamIDUserChanged") ?? type.GetField("userChanged");
                var userMakingChangeField = type.GetField("m_ulSteamIDMakingChange") ?? type.GetField("m_SteamIDMakingChange") ?? type.GetField("userMakingChange");
                var stateChangeField = type.GetField("m_rgfChatMemberStateChange") ?? type.GetField("m_StateChange") ?? type.GetField("stateChange");

                if (!ReferenceEquals(lobbyIdField, null))
                {
                    var value = lobbyIdField.GetValue(callbackData);
                    if (value is ulong ul)
                    {
                        lobbyId = ul;
                    }
                    else if (!ReferenceEquals(value, null) && ulong.TryParse(value.ToString(), out ulong parsed))
                    {
                        lobbyId = parsed;
                    }
                }
                if (!ReferenceEquals(userChangedField, null))
                {
                    var value = userChangedField.GetValue(callbackData);
                    if (value is ulong ul)
                    {
                        userChanged = ul;
                    }
                    else if (!ReferenceEquals(value, null) && ulong.TryParse(value.ToString(), out ulong parsed))
                    {
                        userChanged = parsed;
                    }
                }
                if (!ReferenceEquals(userMakingChangeField, null))
                {
                    var value = userMakingChangeField.GetValue(callbackData);
                    if (value is ulong ul)
                    {
                        userMakingChange = ul;
                    }
                    else if (!ReferenceEquals(value, null) && ulong.TryParse(value.ToString(), out ulong parsed))
                    {
                        userMakingChange = parsed;
                    }
                }
                if (!ReferenceEquals(stateChangeField, null))
                {
                    var value = stateChangeField.GetValue(callbackData);
                    if (value is uint u)
                    {
                        stateChange = u;
                    }
                    else if (!ReferenceEquals(value, null) && uint.TryParse(value.ToString(), out uint parsed))
                    {
                        stateChange = parsed;
                    }
                }

                ulong mySteamId = SteamReflectionHelper.GetSteamID();
                Debug.Log($"[SteamCallbackManager] [LobbyChatUpdate] Host/Client SteamID: {mySteamId}, userChanged: {userChanged}, lobbyId: {lobbyId}, stateChange: 0x{stateChange:X}");

                // State change flags (from Steamworks):
                // 0x01: Entered, 0x02: Left, 0x04: Disconnected, 0x08: Kicked, 0x10: Banned
                if (!lobbyId.Equals(0UL) && !userChanged.Equals(0UL))
                {
                    if ((stateChange & 0x01).Equals(0x01) && !userChanged.Equals(mySteamId))
                    {
                        Debug.Log($"[SteamCallbackManager] Player {userChanged} has joined the lobby (LobbyChatUpdate, not self)");
                        NotifyHostOfNewPlayer(userChanged);
                        AcceptP2PSessionWithPlayer(userChanged);
                    }
                    if (((stateChange & 0x02).Equals(0x02) || (stateChange & 0x04).Equals(0x04) || (stateChange & 0x08).Equals(0x08) || (stateChange & 0x10).Equals(0x10)) && !userChanged.Equals(mySteamId))
                    {
                        Debug.Log($"[SteamCallbackManager] Player {userChanged} has left the lobby (LobbyChatUpdate, not self), reason: 0x{stateChange:X}");
                        // Handle player leave logic here if needed
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SteamCallbackManager] Error in OnLobbyChatUpdate: {ex.Message}\n{ex.StackTrace}");
            }
        }
    }
}
